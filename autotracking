local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- Get local player and camera
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = Workspace.CurrentCamera

-- Set the target player's name for tracking and aiming
local targetPlayerName = "two020214"  -- Replace with the target player's nam
local connection  -- Used to disconnect and reconnect the tracking function
local isAttacking = false  -- Prevent overlapping attack sequences
local lastSkillUseTime = 0  -- Track the last time a skill was used
local skillCooldown = 3  -- Cooldown time in seconds for the skill
local skillQueue = {"Flowing Water", "Lethal Whirlwind Stream", "Hunter's Grasp", "Prey's Peril"}  -- Skill rotation list
local currentSkillIndex = 1  -- Track the current skill in the queue
local humanoidDiedConnection  -- Store the Died connection for cleanup
local minimumFollowDistance = 3  -- Minimum distance to maintain when following target

-- Function to stop tracking
local function stopTracking()
    if connection then
        connection:Disconnect()
        connection = nil
    end
end

-- Function to perform dash (sprint) action
local function performDash()
    local args = {
        [1] = {
            ["Dash"] = Enum.KeyCode.W,  -- Adjust if needed; this simulates a dash forward
            ["Key"] = Enum.KeyCode.Q,   -- The key associated with the dash action
            ["Goal"] = "KeyPress"
        }
    }
    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
end

-- Function to perform normal attack (left click)
local function performNormalAttack()
    local args = {
        [1] = {
            ["Goal"] = "LeftClick",
            ["Mobile"] = true
        }
    }
    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
end

-- Function to release normal attack (left click release)
local function releaseNormalAttack()
    local args = {
        [1] = {
            ["Goal"] = "LeftClickRelease",
            ["Mobile"] = true
        }
    }
    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
end

-- Function to perform a skill using specific skill names
local function performSkill(skillName)
    local currentTime = tick()
    if (currentTime - lastSkillUseTime) < skillCooldown then return end  -- Ensure cooldown is respected

    -- Execute the skill based on the provided skill name
    local function useSkillByName(skillName)
        local tool = localPlayer.Backpack:FindFirstChild(skillName)
        if tool then
            local args = {
                [1] = {
                    ["Tool"] = tool,
                    ["Goal"] = "Console Move"
                }
            }
            game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
        else
            warn("Skill not found in backpack: " .. skillName)
        end
    end

    useSkillByName(skillName)  -- Use the current skill
    lastSkillUseTime = currentTime  -- Update the last skill use time
end

-- Function to alternate between normal attacks and skills
local function attackAndUseSkills()
    if isAttacking then return end  -- Prevent multiple attack triggers
    isAttacking = true

    while isAttacking do
        -- Perform normal attack
        performNormalAttack()
        wait(0.3)  -- Adjust delay for attack speed
        releaseNormalAttack()

        -- Use the next skill in the queue
        local skillName = skillQueue[currentSkillIndex]
        performSkill(skillName)
        
        -- Cycle through the skill queue
        currentSkillIndex = currentSkillIndex + 1
        if currentSkillIndex > #skillQueue then
            currentSkillIndex = 1
        end

        wait(0.5)  -- Adjust delay for cooldown between skills and attacks
    end
end

-- Function to stop attacking
local function stopAttacking()
    isAttacking = false
end

-- Function to track and aim at the target player
local function trackAndAimAtPlayer()
    local targetPlayer = Players:FindFirstChild(targetPlayerName)

    if targetPlayer then
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local targetHumanoid = targetCharacter:WaitForChild("Humanoid")

        -- Listen for the target player's death event
        targetHumanoid.Died:Connect(function()
            stopTracking()  -- Stop tracking and aiming when the target player dies
            stopAttacking()  -- Stop attacking when the target player dies
        end)

        -- Continuously update tracking and aiming
        connection = RunService.RenderStepped:Connect(function()
            if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetCharacter.HumanoidRootPart.Position
                local playerPosition = character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.Position
                local distance = (targetPosition - playerPosition).Magnitude

                -- Only move towards the target if the distance is greater than the minimum follow distance
                if distance > minimumFollowDistance then
                    humanoid:MoveTo(targetPosition - (targetPosition - playerPosition).Unit * minimumFollowDistance)
                end

                -- Update the camera to aim at the target player
                local cameraPosition = camera.CFrame.Position
                camera.CFrame = CFrame.lookAt(cameraPosition, targetPosition)

                -- Check distance and perform dash if within 35 meters
                if distance <= 35 then
                    performDash()  -- Execute dash action when close enough
                end

                -- Start attacking and using skills when within 7 meters
                if distance <= 7 then
                    attackAndUseSkills()
                else
                    stopAttacking()  -- Stop attacking when outside 7 meters
                end
            end
        end)

        -- Listen for the target player's respawn event and restart tracking
        targetPlayer.CharacterAdded:Connect(function(newCharacter)
            targetCharacter = newCharacter
            local newHumanoid = newCharacter:WaitForChild("Humanoid")
            trackAndAimAtPlayer()  -- Restart aiming at the new character
        end)
    else
        warn("Target player not found: " .. targetPlayerName)
    end
end

-- Function to handle local player death and respawn
local function onPlayerDeath()
    -- Stop any ongoing attack or tracking
    stopTracking()
    stopAttacking()

    -- Disconnect the current Died event to avoid multiple connections
    if humanoidDiedConnection then
        humanoidDiedConnection:Disconnect()
        humanoidDiedConnection = nil
    end

    -- Wait for the player to respawn
    localPlayer.CharacterAdded:Wait()
    character = localPlayer.Character
    humanoid = character:WaitForChild("Humanoid")

    -- Reconnect the Died event for the new character
    humanoidDiedConnection = humanoid.Died:Connect(onPlayerDeath)

    -- Restart tracking and aiming once respawned
    trackAndAimAtPlayer()
end

-- Listen for the local player's death event and ensure only one connection is made
humanoidDiedConnection = humanoid.Died:Connect(onPlayerDeath)

-- Start tracking and aiming when the player's character is loaded
if character then
    trackAndAimAtPlayer()
else
    localPlayer.CharacterAdded:Connect(trackAndAimAtPlayer)
end
