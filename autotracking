local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- Get local player and camera
local localPlayer = Players.LocalPlayer
local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local camera = Workspace.CurrentCamera

-- Set the target player's name for tracking and aiming
local targetPlayerName = "yaoshen21"  -- Replace with the target player's name
local connection  -- Used to disconnect and reconnect the tracking function
local isAttacking = false  -- Prevent overlapping attack sequences
local lastDodgeTime = 0  -- Track the last time a dodge was performed
local dodgeCooldown = 3  -- Cooldown time in seconds for side dodge

-- Function to stop tracking
local function stopTracking()
    if connection then
        connection:Disconnect()
        connection = nil
    end
end

-- Function to perform dash (sprint) action
local function performDash()
    local args = {
        [1] = {
            ["Dash"] = Enum.KeyCode.W,  -- Adjust if needed; this simulates a dash forward
            ["Key"] = Enum.KeyCode.Q,   -- The key associated with the dash action
            ["Goal"] = "KeyPress"
        }
    }
    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
end

-- Function to start attacking when within 7 meters
local function startAttacking()
    if isAttacking then return end  -- Prevent multiple attack triggers
    isAttacking = true

    -- Loop to keep attacking while within range
    while isAttacking do
        local function performLeftClick()
            local args = {
                [1] = {
                    ["Goal"] = "LeftClick",
                    ["Mobile"] = true
                }
            }
            game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
        end

        local function releaseLeftClick()
            local args = {
                [1] = {
                    ["Goal"] = "LeftClickRelease",
                    ["Mobile"] = true
                }
            }
            game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
        end

        performLeftClick()
        wait(0.3)  -- Adjust delay as needed
        releaseLeftClick()
        wait(0.3)  -- Adjust delay as needed
    end
end

-- Function to stop attacking
local function stopAttacking()
    isAttacking = false
end

-- Function to perform side dodge
local function performSideDodge()
    local currentTime = tick()
    if (currentTime - lastDodgeTime) < dodgeCooldown then return end  -- Ensure cooldown is respected

    -- Execute dodge with right direction and Q key press
    local function dodgeRight()
        local args = {
            [1] = {
                ["Dash"] = Enum.KeyCode.D,  -- Right direction
                ["Key"] = Enum.KeyCode.Q,   -- Q key for dash
                ["Goal"] = "KeyPress"
            }
        }
        game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
    end

    dodgeRight()
    lastDodgeTime = currentTime  -- Update the last dodge time
end

-- Function to track and aim at the target player
local function trackAndAimAtPlayer()
    local targetPlayer = Players:FindFirstChild(targetPlayerName)

    if targetPlayer then
        local targetCharacter = targetPlayer.Character or targetPlayer.CharacterAdded:Wait()
        local targetHumanoid = targetCharacter:WaitForChild("Humanoid")

        -- Listen for the target player's death event
        targetHumanoid.Died:Connect(function()
            stopTracking()  -- Stop tracking and aiming when the target player dies
            stopAttacking()  -- Stop attacking when the target player dies
        end)

        -- Continuously update tracking and aiming
        connection = RunService.RenderStepped:Connect(function()
            if targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart") then
                local targetPosition = targetCharacter.HumanoidRootPart.Position
                local playerPosition = character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.Position
                local distance = (targetPosition - playerPosition).Magnitude

                -- Move the player's character towards the target
                humanoid:MoveTo(targetPosition)

                -- Update the camera to aim at the target player
                local cameraPosition = camera.CFrame.Position
                camera.CFrame = CFrame.lookAt(cameraPosition, targetPosition)

                -- Check distance and perform dash if within 35 meters
                if distance <= 35 then
                    performDash()  -- Execute dash action when close enough
                end

                -- Check distance and decide between attacking or dodging
                if distance <= 7 then
                    if (tick() - lastDodgeTime) >= dodgeCooldown then
                        performSideDodge()  -- Execute side dodge when cooldown allows
                    else
                        startAttacking()  -- Attack when not dodging
                    end
                else
                    stopAttacking()  -- Stop attacking when outside 7 meters
                end
            end
        end)

        -- Listen for the target player's respawn event and restart tracking
        targetPlayer.CharacterAdded:Connect(function(newCharacter)
            targetCharacter = newCharacter
            local newHumanoid = newCharacter:WaitForChild("Humanoid")
            trackAndAimAtPlayer()  -- Restart aiming at the new character
        end)
    else
        warn("Target player not found: " .. targetPlayerName)
    end
end

-- Start tracking and aiming when the player's character is loaded
if character then
    trackAndAimAtPlayer()
else
    localPlayer.CharacterAdded:Connect(trackAndAimAtPlayer)
end
